---
- name: check whether grsec is already running
  command: uname -r
  register: uname_initial_result
  changed_when: false

- name: copy kernel package to destination server
  copy: src={{package_filename}} dest=/root/{{package_filename|basename}}
  when: "'grsec' not in uname_initial_result.stdout"

- name: install paxctl
  apt: pkg=paxctl state=present

- name: install paxtest
  apt: pkg=paxtest state=present

- name: make the required grub paxctl changes
  command: paxctl -Cpm {{ item }}
  with_items: grub_pax

- name: convert python executable headers
  # Using the `raw` module here because otherwise
  # Ansible would need to execute python2.7 to handle
  # the task, which causes the paxctl command to fail
  # with "/usr/bin/python2.7: Text file busy". By using
  # `raw`, only localhost's ssh and the remote's sh are used.
  raw: paxctl -c /usr/bin/python2.7
  tags:
    - jawn
  when: 'ansible_distribution == "Debian" and
        grsec_disable_python_memprotect is defined and
        grsec_disable_python_memprotect == "true"'

- name: disable memprotect on python2.7
  raw: paxctl -m /usr/bin/python2.7
  register: disable_memprotect_python_result
  changed_when: '"converted" in disable_memprotect_python_result.stdout'
  tags:
    - jawn
  when: 'ansible_distribution == "Debian" and
        grsec_disable_python_memprotect is defined and
        grsec_disable_python_memprotect == "true"'

- name: install grsec kernel
  apt: deb="/root/{{package_filename|basename}}"
  when: "'grsec' not in uname_initial_result.stdout"

- name: get grsec kernel string
  shell: grep menuentry /boot/grub/grub.cfg | grep grsec | grep -v recovery | head -1 | cut -d "'" -f2
  register: grsec_str

- name: set grsec kernel as default
  lineinfile:
    dest: /etc/default/grub
    regexp: '^GRUB_DEFAULT='
    state: present
    line: 'GRUB_DEFAULT="Advanced options for {% if target_os == "ubuntu" %}Ubuntu{% elif target_os == "debian"%}Debian GNU/Linux{% endif %}>{{ grsec_str.stdout }}"'

- name: run update-grub
  command: update-grub
  when: "'grsec' not in uname_initial_result.stdout"

- name: set grsec kernel as default for next boot
  command: grub-reboot "Advanced options for {% if target_os == "ubuntu" %}Ubuntu{% elif target_os == "debian"%}Debian GNU/Linux{% endif %}>{{ grsec_str.stdout }}"
  when: "'grsec' not in uname_initial_result.stdout"

- name: reboot into the grsec kernel
  # Simply rebooting causes the subsequent wait_for task to fail. See here:
  # https://github.com/ansible/ansible/issues/10616
  # Sleeping and then shutting down, via the shell module, is a workaround.
  shell: sleep 3 && shutdown -r now "Rebooting into the grsec kernel..."
  async: 1
  poll: 0
  ignore_errors: true
  sudo: yes
  when: "'grsec' not in uname_initial_result.stdout"

- name: waiting for server to come back
  local_action: wait_for
    host={{ ansible_ssh_host }}
    port={{ ansible_ssh_port | default('22')}}
    delay=30
    state=started
  sudo: false
  when: "'grsec' not in uname_initial_result.stdout"

  # Adding extra wait time to prevent timeouts
  # during debugging. Likely not necessary, but test
  # before removing.
- name: wait extra time for server to come back up
  pause:
    seconds: 30
  when: "'grsec' not in uname_initial_result.stdout"

- name: check that grsec is running
  command: uname -r
  register: uname_final_result
  changed_when: false
  failed_when: "'grsec' not in uname_final_result.stdout"


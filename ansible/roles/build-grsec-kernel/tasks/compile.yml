---
- name: Clean source directory prior to extraction.
  file:
    path: "{{ linux_source_directory }}"
    state: absent

- name: Extract Linux tarball (.tar -> directory).
  unarchive:
    copy: no
    src: "{{ download_directory }}/linux-{{ linux_kernel_version }}.tar"
    dest: "{{ download_directory }}"

- name: Apply grsecurity patch.
  shell: patch -p1 < ../{{ grsecurity_patch.filename | quote }}
  args:
    chdir: "{{ linux_source_directory }}"

- name: Copy kernel config file.
  copy:
    src: config-{{ grsecurity_build_strategy }}
    dest: "{{ linux_source_directory }}/.config"

- name: Clean kernel source tree.
  command: make-kpkg clean
  args:
    chdir: "{{ linux_source_directory }}"

- name: Generate config, accepting default choices.
  shell: yes '' | make-kpkg configure
  args:
    chdir: "{{ linux_source_directory }}"

- name: Build the patched vanilla kernel.
  shell: >
    fakeroot make-kpkg --initrd kernel_image
  args:
    chdir: "{{ linux_source_directory }}"
  environment:
    CONCURRENCY_LEVEL: "{{ ansible_processor_vcpus }}"
  when: grsecurity_build_strategy == 'vanilla'

- name: Build the patched kernel with Ubuntu overlay files.
  shell: >
    fakeroot make-kpkg --initrd --overlay-dir=../ubuntu-package kernel_image
  args:
    chdir: "{{ linux_source_directory }}"
  environment:
    CONCURRENCY_LEVEL: "{{ ansible_processor_vcpus }}"
  when: grsecurity_build_strategy == 'ubuntu'

- name: Fetch built kernel package back to localhost.
  fetch:
    src: "{{ download_directory }}/{{ grsecurity_deb_package }}"
    dest: ./
    fail_on_missing: yes
    flat: yes
  tags:
    - fetch
